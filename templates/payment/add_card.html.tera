{% extends "bases/logged_in" %}
{% block title %}{{ header }}{% endblock title %}
{% block head %}
{{ super() }}
<style>
    #main {
      margin-top: 5vh;
    }
    /**
    * The CSS shown here will not be introduced in the Quickstart guide, but shows
    * how you can use CSS to style your Element's container.
    */
    .StripeElement {
      background-color: white;
      height: 40px;
      padding: 10px 12px;
      border-radius: 4px;
      border: 1px solid transparent;
      box-shadow: 0 1px 3px 0 #e6ebf1;
      -webkit-transition: box-shadow 150ms ease;
      transition: box-shadow 150ms ease;
    }

    .StripeElement--focus {
      box-shadow: 0 1px 3px 0 #cfd7df;
    }

    .StripeElement--invalid {
      border-color: #fa755a;
    }

    .StripeElement--webkit-autofill {
      background-color: #fefde5 !important;
    }
    #button {
        border: none;
        border-radius: 4px;
        outline: none;
        text-decoration: none;
        color: #fff;
        background: #32325d;
        white-space: nowrap;
        display: inline-block;
        height: 40px;
        line-height: 40px;
        padding: 0 14px;
        box-shadow: 0 4px 6px rgba(50, 50, 93, .11), 0 1px 3px rgba(0, 0, 0, .08);
        border-radius: 4px;
        font-size: 15px;
        font-weight: 600;
        letter-spacing: 0.025em;
        text-decoration: none;
        -webkit-transition: all 150ms ease;
        transition: all 150ms ease;
        float: left;
        margin-left: 12px;
        margin-top: 28px;
    }
    div#app > div.application > div.application--wrap > div.alert {
      margin: 0;
      text-align: center;
      font-size: 16px;
    }
    #main > .layout > .flex.xs12.lg10.offset-lg1 {
      text-align: center;
    }
    #main > .layout > .flex.xs12.lg10.offset-lg1 > h1.display-2.blue-grey--text.text--darken-2 {
      text-align: center;
      font-weight: 400!important;
    }
    #main > .layout > .flex.xs12.lg10.offset-lg1 > .layout > .flex.xs12.lg8.offset-lg2 > p.subheading.blue-grey--text.text--lighten-1 {
      letter-spacing: 0.5px!important;
      margin-top: 1em;
      line-height: 1.4!important;
      font-size: 18px!important;
      font-weight: 400;
      text-align: center;
    }
    #main > .layout.wrap.row {
      margin-top: 4em;
    }
    #main > .layout.wrap.row > .flex.xs12.lg6.offset-lg3 > .card.card--flat {
      padding: 2em;
    }
    #main > .layout.wrap.row > .flex.xs12.lg6.offset-lg3 > .card.card--flat > form#payment-form {
      margin: 1em 0;
    }
    #main > .layout.wrap.row > .flex.xs12.lg6.offset-lg3 > .card.card--flat > form#payment-form > button.btn.btn--block.btn--large.theme--dark.green {
      margin: 1em 0 -1em;
    }
</style>
<script src="https://js.stripe.com/v3/"></script>
{% endblock head %}
{% block content %}
  {% if flash_name == "error" %}
    <v-alert color="error" :value="true">{{ flash_msg }}</v-alert>
  {% endif %}
  {% if flash_name == "success" %}
    <v-alert color="success" :value="true">{{ flash_msg }}</v-alert>
  {% endif %}
  {{ super() }}
  <v-container>
    <v-layout wrap row>
      <v-flex xs12 lg8 offset-lg2>
        <div id="main">
          <v-layout>
            <v-flex xs12 lg10 offset-lg1>
              <h1 class="display-2 blue-grey--text text--darken-2">You're almost there.</h1>
              <v-layout>
                <v-flex xs12 lg8 offset-lg2>
                  <p class="subheading blue-grey--text text--lighten-1">Adding a card takes less than a minute, and don’t worry, we won’t charge anything until you decide to buy a serie! Seriously - you don’t have to make a decision right now. We don’t store you credit card information so you can be sure that it’s safe!</p>
                </v-flex>
              </v-layout>
            </v-flex>
          </v-layout>
          <v-layout wrap row>
            <v-flex xs12 lg6 offset-lg3>
                <v-card flat>
                  <h2 class="headline">Add a card to your account</h2>
                  <form method="POST" id="payment-form">
                    <input type="hidden" name="csrf" value="{{ csrf }}">
                    <div class="form-row">
                      <div id="card-element"></div>
                      <div id="card-errors" role="alert"></div>
                    </div>
                    <v-btn large block dark color="green" :disabled="disabled" :loading="loading"  @click="add_card($event)">Add card</v-btn>
                  </form>
                </v-card>
            </v-flex>
          </v-layout>
        </div>
      </v-flex>
    </v-layout>
  </v-container>
{% endblock content %}
{% block script %}
  <script>
    new Vue({
      el: '#app',
      delimiters: ["${","}"],
      data: {
        loading: false,
        disabled: false,
        card: null,
        stripe: null
      },
      mounted() {
        // Create a Stripe client.
        this.stripe = Stripe('{{ publishable_key }}');

        // Create an instance of Elements.
        var elements = this.stripe.elements();

        // Custom styling can be passed to options when creating an Element.
        // (Note that this demo uses a wider set of styles than the guide below.)
        var style = {
          base: {
            color: '#32325d',
            lineHeight: '18px',
            fontFamily: '"Helvetica Neue", Helvetica, sans-serif',
            fontSmoothing: 'antialiased',
            fontSize: '16px',
            '::placeholder': {
              color: '#aab7c4'
            }
          },
          invalid: {
            color: '#fa755a',
            iconColor: '#fa755a'
          }
        };

        // Create an instance of the card Element.
        this.card = elements.create('card', {style: style});

        // Add an instance of the card Element into the `card-element` <div>.
        this.card.mount('#card-element');

        // Handle real-time validation errors from the card Element.
        this.card.addEventListener('change', event => {
          var displayError = document.getElementById('card-errors');
          if (event.error) {
            this.disabled = true;
            displayError.textContent = event.error.message;
          } else {
            this.disabled = false;
            displayError.textContent = '';
          }
        });
      },
      methods: {
        add_card(event) {
          this.loading = true;
          event.preventDefault();
          this.stripe.createToken(this.card).then(result => {
            if (result.error) {
              this.loading = true;
              // Inform the user if there was an error.
              var errorElement = document.getElementById('card-errors');
              errorElement.textContent = result.error.message;
            } else {
              // Send the token to your server.
              var form = document.getElementById("payment-form");
              for (fields in result.token) {
                if (fields == "card") {
                  for (field in result.token.card) {
                    if (result.token.card[field] != null && typeof result.token.card[field] !== 'object') {
                      var input = document.createElement("input");
                      input.setAttribute("type", "hidden");
                      input.setAttribute("name", 'card_' + field);
                      input.setAttribute("value", result.token.card[field]);
                      form.appendChild(input);
                    }
                  }
                } else {
                  if (result.token[fields] != null && typeof result.token[fields] !== 'object') {
                    var input = document.createElement("input");
                    input.setAttribute("type", "hidden");
                    input.setAttribute("name", fields);
                    input.setAttribute("value", result.token[fields]);
                    form.appendChild(input);
                  }
                }
              }

              form.submit();
            }
          });
        }
      }
    })
  </script>
{% endblock script %}